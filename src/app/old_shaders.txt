const VERTEX_SHADER_SOURCE = `
  attribute vec4 aVertexPosition;
  attribute vec3 aVertexNormal;

  uniform vec4 uColor;
  uniform mat4 uNormalMatrix;
  uniform mat4 uModelMatrix;
  uniform mat4 uViewMatrix;
  uniform mat4 uProjectionMatrix;

  varying highp vec3 vNormal;
  varying highp vec3 vLighting;
  varying highp vec4 vColor;

  void main() {
    gl_Position = uProjectionMatrix * uViewMatrix * uModelMatrix * aVertexPosition;

    // Apply lighting effect
    highp vec3 ambientLight = vec3(0.3, 0.3, 0.3);
    highp vec3 directionalLightColor = vec3(1, 1, 1);
    highp vec3 directionalVector = normalize(vec3(0.85, 0.8, 0.75));

    highp vec4 transformedNormal = uNormalMatrix * vec4(aVertexNormal, 1.0);

    highp float directional = max(dot(transformedNormal.xyz, directionalVector), 0.0);
    vLighting = ambientLight + (directionalLightColor * directional);
    vColor = uColor;
    vNormal = aVertexNormal;
  }
`;

const FRAGMENT_SHADER_SOURCE = `
  varying highp vec3 vLighting;
  varying highp vec4 vColor;

  void main() {
    vec3 normal = normalize(vNormal);
    gl_FragColor = vec4(vColor.rgb * vLighting, vColor.a);
  }
`;